#!/usr/bin/python2

# TODO elegant shutdown

import multiprocessing
import subprocess

class Worker(multiprocessing.Process):
  def __init__(self, queue):
    multiprocessing.Process.__init__(self)
    self.queue = queue

  def run(self):
    while not self.queue.empty():
      job = self.queue.get()
      try:
        print "Running", job
        subprocess.call(job, shell=True)
        print job, "is done"
      except:
        print "Problem!"
      queue.task_done()

if __name__ == '__main__':
  queue = multiprocessing.JoinableQueue()
  per_hour = '25000'
  for city in ['austin', 'baton_rouge', 'seattle', 'sf']:
    queue.put('./tools/auction_experiment all ' + city + ' ' + per_hour)
    for mode in ['fifo', 'auction-sys', 'auction-no-sys', 'equal-sys',
                 'equal-no-sys', 'fixed-sys', 'fixed-no-sys']:
      pass
      #queue.put('./tools/run ' + city + '-' + mode)
      #queue.put('./tools/finalize ' + city + '-' + mode)

  workers = []
  threads = 4
  for i in xrange(threads):
    worker = Worker(queue)
    workers.append(worker)
    worker.start()

  queue.join()
