MATSim gets orders of magnitude speedup by simulating discrete events rather
than discrete time-steps. They define "interesting" occurrences as cars entering
or leaving a link, so there's not a need to simulate/interpolate movement on the
links in between. Instead, they can find the next time a car will generate an
interesting movement and jump much more than a fixed 0.1s time-step much of the
time. This queue model neglects the details of lane-changing and includes extra
mechanisms to model the shockwave delay effect of stopped cars beginning to
start.

It'd be great to get a similar speedup in AORTA, but without compromising the
simplicity of a microscopic, agent-based simulation with the complexity and
inaccuracy of a queue model. In principle, layering a meseoscopic simulation
(because removing detail amounts to losing microscopicness) could be done, and
even combined with microsimulation to interpolate when needed?


    - in GUI, have to interpolate positions?
    - equivalent to just choosing large time-step?
    - mixed time-steps... (minus lanechanging)
      - front of queue doesnt care about anything, his time-step can bring him
        to intersection
      - maybe all behind the front all get the same jump?
      - but that could neglect wave/crunch effects...
      - and lanechanging hard to simulate!
    - at time t, vehicles with expected < t are chugging along, >= are queued at
      the end





Example of why the condition variable idea makes sense: stalled traffic. I'm
just waiting on the intersection to let me through; I'm just waiting on the car
in front of me to move. Dependency graph.

more generally, agents dont have to do anything new in 'equilibrium conditions':

- when we're just waiting on a light
- when we're just waiting on the car in front of us
- when we're traveling as fast as possible and so is the car in front of us and
  nobody's lane-changing and we're not approaching the end of a lane

seems like this relation is transitive

this obviously breaks down when our lookahead crosses more than the current
edge, by #3. but in those cases, is much time really spent computationally?


when can we ENTER steady-state?
- when we're going our max accel
- when we're not LCing
- when we dont WANT to LC

when must we CEASE steady-state?
- when we complete LCing
- when an intersection decides the person asking can_go
- when we approach the end of our lane (implying this is useful for long lanes)
- when somebody LCs into our lane near us
- when the person we're following wakes up from steady-state* (and we get close)
