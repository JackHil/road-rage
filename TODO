# TODO #

- stats
  a general way to average timing info, agent completion time, idling time...

cleanup:
  - is yielding for stop signs needed? if we have one lock but not the next, we should correctly
    inch forward now.
    - and nix 'upcoming intersections' and whatever else is useless. unregister.
    - BUT one situation we do seem to need it:
      somebody wont inch forward because he's on an edge, not a turn. 
      - and if we generalize, people entering intersections really slowly... wtf.
        (makes sense why. somebody in stable position creeps forward.)
      - maybe keep the current logic (which accel_to_end()s negatives sometimes)
        but make an exception when it's not the first lookahead step? so hackish.

      - only creep forward from an edge when your move is from an edge to a DIFFERENT edge?
      - and when speed is 0?
    (1330135736449 on btr)
    *** remove the TODOs

  *** missing a conflict between lefts from perps.
  - make reservation policy handle unregistering agents so we can nuke em

  - intersections could penalize agents who call ahead and are close, but have another
    intersection to pass first.

TRUE PRIORITIES
1) gridlock
  - reservation policy stalemates.
  - when things are truly at capacity, nothing that _can_ be done.
  - describe in paper.
2) bugfix <-> test at scale iteration
  - optimize
3) feature: traffic signals
  - consider letting intersections react on their own, rather than just from agents
    simplifies reasoning about traffic signals, but also takes away the sorta clever delay-avoider.

GENERATORS
  - a way to turn them off / reap them in the UI
  - color agents from diff generators a certain way
  - a way to save a "scenario"
  - test at scale, and profile again.

PROFILING
  - we can do much better with ready agents... max capacity of edges, group them based on where they
    want to spawn, maybe by generator?
  - dont ask length of a list when not needed...
  - how fast can we generate lots of dumb agents?

  0) now that we maintain following dist from agents, could we test for collisions in queues
     non-atomically?
    - if we detect one, put it on the list to check at the end.
  1) is caching properties of linked list hurting us for iterating through big things?
  2) maintain active queues/intersections in-place as we do steps
    - run a test to make sure the two actually are the same.
  3) ... increase dt, of course
  4) optimize step/react -- those take the most work time
    - if an agent is dependent on another and nothing changed with them, dont even bother?

BIGGER ISSUES
  - fix geom of edge lines
  - make sure turns and conflicts are as good as possible
    - randomize num of lanes to test
  * lane changing
  - is there a way to analytically say "an agent will own this chunk" at some time, and then solve for collisions?
  - nondeterministic.
    - when running, agents enter at diff times
    - when paused, threads compute routes in diff orders, then two agents compete to spawn in same spot.
  - automated testing strategy.
  - contraction hierarchies for FAST pathing, or wards
  - group crazy intersections together and have S-turns.
    - relatedly, have a notion of "I'm done with the turn, but I'm protruding into the intersection"
      by requiring not only we're done with a turn but also some dist along the new edge.

POSSIBLY SIMPLE
  - slow down for turns (a speed limit)
  - follow dist variable based on speed, so when a light goes green,
    everyone starts simultaneously
  - tweak cfg now that we have meters
  - script to scrape osm
  - switch ant to sbt? https://github.com/harrah/xsbt/wiki/Examples
  - when we speed up, sleep less in UI?
  - ui configurable intersection policies
  - snapshot mode in headless with agents pos, to later render

### Map building ###

- our pruning of pedestrian ways seems to be a bit too enthusiastic (see Guadalupe St)
- deterministic construction is still wonky, with both ward IDs and lines (due to meeting up)
- make line segs meet up better.
- style: xml out could be string.format or xml and then stringify, or use lazy?
- cul-de-sac handling in p2... needed?
  - Claus Circle in BR... has no outgoing turns.
- pregraph3 vs final graph structure?
- multi-lane situations dont have enough turns, and we need to do more trimming!
- lane reversal
  1) Traversable.location starts from the other end (distances, queues all stay same)
  2) dynamically recalculating turns

### Wards ###

- whats broken with mikes?
  - length
  - overall strategy
  - semantics of one of the set operations
- find 'major' roads better
  - crosses/links major roads
  - manually editing
  - update osm (scripts!)
- my wards!
  - guarantee some kind of connectedness within a ward
  - except in vs out edges to the whole neighborhood?
- play with min span trees for pathing

### UI ###

- show 'fps' in viewer
- agents in middle of road makes ends of lines once again look sucky.
- show agents who are currently GOING
  - ui could show policy's current owner or something
- show routes better
- config
- menu items doing stuff
- make it look nicer
  - UI polishing
  - black road backgrounds dont meet up smoothly since we go by line segment
    - add extra lanes on either side, dont color them white, but draw the stuff in between?
- way better pruning of what to (re-draw) using quadtrees
  - but is it even needed?
- dont show arrows when line segs are really clustered
- draw the orig corner of freehanded polygons differently or something

### Agents ###

- detect collisions
  - post-mortem checker still misses scary things in between, like when merging.

- lots of things break if we have a vertex with a self-loop

- make them slow down for turns

- lanechanging model
- spawning specifically in UI
- structuring policy stuff as a state machine and events may be more elegant...
- give lanes/roads/etc the ability to be closed

### Scalaisms ###

- move all configable things to Util
- use ListBuffers more.
- make more immutable things
- reduce more vars to vals
- make everything possible immutable, but then have to figure out how to build
  inter-referential things
  - Mutable subclasses of everything used during construction..
  - have more ids and methods that access based on those. that'll break it.
- explicitly override hashcode?

### Simulation ###

- tolling
- lane reversal
- traffic signals
- dynamic traffic signals
- spawning realistic traffic patterns
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Demand/Introduction_to_demand_modelling_in_SUMO.html
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Data/Traffic_Data.html
- promoting stop signs -> lights
- mixing intersections!

### Administrative ###

- documentation
- API and code freeze
- paper
