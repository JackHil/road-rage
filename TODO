# TODO #

- fix avoid_next_agent

- make agents be able to reach any goal
  - creep along at nonzero speed to goal, noting timesteps
  - adjust threshold for when to start stopping

### Map building ###

- our pruning of pedestrian ways seems to be a bit too enthusiastic (see Guadalupe St)
- deterministic construction is still wonky, with both ward IDs and lines (due to meeting up)
- make line segs meet up better.
- style: xml out could be string.format or xml and then stringify, or use lazy?
- cul-de-sac handling in p2... needed?
  - Claus Circle in BR... has no outgoing turns.
- pregraph3 vs final graph structure?
- scc removal is broken
  - being on a directed graph DOES change things... we're detecting an scc and not handling the
    one-way edge leading into it!
- multi-lane situations dont have enough turns, and we need to do more trimming!
- lane reversal
  1) Traversable.location starts from the other end (distances, queues all stay same)
  2) dynamically recalculating turns

### Wards ###

- whats broken with mikes?
  - length
  - overall strategy
  - semantics of one of the set operations
- find 'major' roads better
  - crosses/links major roads
  - manually editing
  - update osm (scripts!)
- my wards!
  - guarantee some kind of connectedness within a ward

### UI ###

- show routes better
- config
- menu items doing stuff
- make it look nicer
  - UI polishing
  - black road backgrounds dont meet up smoothly since we go by line segment
    - add extra lanes on either side, dont color them white, but draw the stuff in between?
- figure out why broken_angle and y inversion everywhere still...
- way better pruning of what to (re-draw) using quadtrees
  - but is it even needed?
- keyboard-grabbing focus is... greedy when minimized
- dont show arrows when line segs are really clustered

### Agents ###

- old static behavior
  - lack of determinism?
    - timesteps matter / crossing many things in one hop
      - if an agent can only adjust speed once per timestep... oops.
    - patho case: two lanes merging, agent on each, order matters.

  - detect collisions
    - post-mortem checker still misses scary things in between, like when merging.
    - force collisions, see if they're detected. set one guy on the road and make him be still!
    - ui show collisions

- ... motivate reactive solution: avoid collisions!
  - we can look ahead to next few travs for agent to avoid
  - but we dont want to reason about who WILL be 
    say theres nobody on the cur queue to worry about. so worry about who could be there next.
    - if we're on a turn going to an edge, just look at the target queue. only way to enter target
      is by lane-changing (TODO) or an incoming turn, and we can trust the intersection exclusion.
    - if we're on an edge going to a turn, we need to ask the vertex if we're clear to cross.
      turn requested => first time.
      - ask as soon as we're on the edge, get a time, idle so that we cross at the right time
        - to give times, we need to know finish times. it'd suck to predict those.
      - or just ask, "lock turn set", slow down (how much?) upon rejection or plow ahead upon success 
        (and lock it.)
    - and do we have to look ahead one trav, or as many as could happen in the timestep?

    http://sumo.sourceforge.net/doc/current/docs/userdoc/Theory/Traffic_Simulations.html describes approaches


  - lots of things break if we have a vertex with a self-loop

  - enforce speed limits
  - test with stalled car
  - make them slow down for turns

- lanechanging model
- spawning safely
- delegate pricy work to a thread pool
- spawning specifically in UI
- allow accel control too
- dimensions to the cars
- structuring policy stuff as a state machine and events may be more elegant...

### Scalaisms ###

- move all configable things to Util
- use ListBuffers more.
- make more immutable things
- reduce more vars to vals
- improve build system (dont recompile)
- Edges as subclasses for direxn might be nice
- make everything possible immutable, but then have to figure out how to build
  inter-referential things
  - Mutable subclasses of everything used during construction..
  - have more ids and methods that access based on those. that'll break it.
- explicitly override hashcode?

### Simulation ###

- tolling
- lane reversal
- 4-way stops
- traffic signals
- dynamic traffic signals
- spawning realistic traffic patterns
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Demand/Introduction_to_demand_modelling_in_SUMO.html
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Data/Traffic_Data.html
- promoting stop signs -> lights
- mixing intersections!

### Administrative ###

- documentation
- API and code freeze
- paper
