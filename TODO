# TODO #

0 fix geometry of edge lines
1 fix turns and conflicts totally
2 diagnose illegal entry (short edges?) and fix totally

3 traffic lights
  - yellow light handling
4 write paper

- lets make sure length corresponds to reality (in m). it's long.

- hopefully minor issues
  - are we entering next edge too fast after a turn?
  - NaN at 1327894373344 on synthetic, 0.1 dt
  - agents stopping too prematurely at 1327896599636 on btr, 0.9 dt
  - 1327906698728 in btr: illegal entry. i suspect many edges in one tick?

- test reservation policy
  - we do deadlock!
  - tell the intersection who we are behind, and make sure our turn will be satisfied after theirs
    in the queue.
  *** but then they will have to schedule their turn first...
  - or no, there is no deadlock, since if x is behind y, theyre in the same turn, and those never
    conflict?

- ui could show policy's current owner or something

* online traffic spawning
* lane changing
* slow down for turns

- cyclic traffic signal mode
  - do we need an event scheduling system?
  - not necessarily, use agents polling us as a timer.

- can we get total deterministicness in headless mode?

- clean up changes (and this bloody file)

### Map building ###

- our pruning of pedestrian ways seems to be a bit too enthusiastic (see Guadalupe St)
- deterministic construction is still wonky, with both ward IDs and lines (due to meeting up)
- make line segs meet up better.
- style: xml out could be string.format or xml and then stringify, or use lazy?
- cul-de-sac handling in p2... needed?
  - Claus Circle in BR... has no outgoing turns.
- pregraph3 vs final graph structure?
- multi-lane situations dont have enough turns, and we need to do more trimming!
- lane reversal
  1) Traversable.location starts from the other end (distances, queues all stay same)
  2) dynamically recalculating turns

### Wards ###

- whats broken with mikes?
  - length
  - overall strategy
  - semantics of one of the set operations
- find 'major' roads better
  - crosses/links major roads
  - manually editing
  - update osm (scripts!)
- my wards!
  - guarantee some kind of connectedness within a ward

### UI ###

- show routes better
- config
- menu items doing stuff
- make it look nicer
  - UI polishing
  - black road backgrounds dont meet up smoothly since we go by line segment
    - add extra lanes on either side, dont color them white, but draw the stuff in between?
- way better pruning of what to (re-draw) using quadtrees
  - but is it even needed?
- keyboard-grabbing focus is... greedy when minimized
- dont show arrows when line segs are really clustered

### Agents ###

- old static behavior
  - lack of determinism?
    - timesteps matter / crossing many things in one hop
      - if an agent can only adjust speed once per timestep... oops.
    - patho case: two lanes merging, agent on each, order matters.

  - detect collisions
    - post-mortem checker still misses scary things in between, like when merging.
    - force collisions, see if they're detected. set one guy on the road and make him be still!
    - ui show collisions

  - lots of things break if we have a vertex with a self-loop

  - enforce speed limits
  - test with stalled car
  - make them slow down for turns

- lanechanging model
- spawning safely
- delegate pricy work to a thread pool
- spawning specifically in UI
- dimensions to the cars (solved by maintaining fixed dist)
- structuring policy stuff as a state machine and events may be more elegant...
- give lanes/roads/etc the ability to be closed

### Scalaisms ###

- move all configable things to Util
- use ListBuffers more.
- make more immutable things
- reduce more vars to vals
- improve build system (dont recompile)
- Edges as subclasses for direxn might be nice
- make everything possible immutable, but then have to figure out how to build
  inter-referential things
  - Mutable subclasses of everything used during construction..
  - have more ids and methods that access based on those. that'll break it.
- explicitly override hashcode?

### Simulation ###

- tolling
- lane reversal
- 4-way stops
- traffic signals
- dynamic traffic signals
- spawning realistic traffic patterns
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Demand/Introduction_to_demand_modelling_in_SUMO.html
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Data/Traffic_Data.html
- promoting stop signs -> lights
- mixing intersections!

### Administrative ###

- documentation
- API and code freeze
- paper
