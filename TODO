# TODO #

# Auctions #

- get several maps, and tuned params/sizes foreach.
  - manually mark danger areas of each map, diff behavior there?
- compatible serialization

- system bid: reservation, prefer batching
  - commoncase = reservation with certain system bid for compatible turns
- system bid: penalty if not much capacity
- system bid: bonus to long-waiting group

# Easy Parallelization
- PARALLEL DETERMINISM INVALID: queue avail_slots

- how to PAR
  - benchmark carefully

- easy PAR
  - queue end_step
  - intersection end_step
  - intersection reaction
  - lookahead

- hard PAR: agent steps
  - dont forget handle_exit
  - LCing means chunking by road
  - figure out where everyone ends up, then merge queues in one thread?

# Fastpaths / Sparse Execution
- agents and intersections could wake each other up now

# Map Construction
- var lines are so confusing and bug-prone
  when we mod part of a line, line's length AND traversables length gets screwed
  get rid of set_lines
- keep orig GPS coords and only scale around for UI
  - then obselete set_params
- xml output too for non-aorta clients
- clean up roads with just 2 roads
  - pass3, since doomed pruning makes new problems
  - but keep pass 2 version? seems to prevent some stuff from getting doomed!
- short roads into longer turns
  * get rid of the hack that adds length to short roads upon creation
  - 50 meters?
  - dont nix roads connected to vertices with only one road!
  - bernwood drive and other places where the number blows up

  - fix the geometry stuff later. what stuff?
    - maybe remove set_lines?
  - remove ui debugging stuff
- make turns better, more systematically
  - try to not remove pieces of maps at all

- use http://wiki.openstreetmap.org/wiki/Relation:restriction
- our pruning of pedestrian ways seems to be a bit too enthusiastic (see Guadalupe St)
- deterministic construction is still wonky, with ward IDs and lines (due to meeting up)
- cul-de-sac handling in p2... needed?
  - Claus Circle in BR... has no outgoing turns.
- connectivity fixpoint algorithm shouldnt be necessary?
- make xml as complete as plaintext?
- lots of things break if we have a vertex with a self-loop

# Simulation Realism
- slow down for turns (a speed limit)
- diversity... different vehicle lengths, parameters
- calibration issues... distances totally off
- have a notion of "I'm done with the turn, but I'm protruding into the intersection"
  by requiring not only we're done with a turn but also some dist along the new edge.
- give lanes/roads/etc the ability to be closed

# Code Cleanup
- pull some math in one place
- split the passes
  - pass1 = read osm + normalize
  - pass2 = pass2
  - pass3 = (>make edge geometry), make edges, make turns,
            (>nuke disconnected), (collapse degenerate verts),
            (small roads to long turns), trim lane lines at vertices
- draw per object
  - UI state needs to go somewhere accessible to all
  - package for awt stuff to avoid importing
- sorted sets everywhere for determinism
- more privates, make abstract members more explicit, delegates
- move all configable things to Util
- make more immutable things / reduce more vars to vals
- make everything possible immutable, but then have to figure out how to build
  inter-referential things
  - Mutable subclasses of everything used during construction..
  - have more ids and methods that access based on those. that'll break it.
  - immutable construction is easy... have parent entity create child.

# Contraction Hierarchies
- smaller problem possibly if verts=Vertex, edges=Roads (oneway or not).
  - but cant get from every incoming road to every outgoing road... can we?

# Intersection Policies
- bug: two tickets at an intersection
- backpressure light optimization
- agents should tell intersections in advance when they know
  - the edge case when we intend to stop

# Scaling
- tighten memory usage, although 1GB supports 1 million agents
- we can do much better with ready agents... max capacity of edges, group them
  based on where they want to spawn, maybe by generator?
- gridlock
  - increase avail slots when we're accepted, not leaving (except route end)
  - when we accept early and check for blockedness, see if theyre anywhere close
    to the turn yet! moot point if the turns not blocked when they ask...
    - aka, make all policies do 'is anyone ahead of you unaccepted'
  - force different turns?
- at big timesteps, nobody moves?

# Testing/Experiments
- bug: experiment script unserializes objects twice
- standalone programs to make/mod scenarios
  - specify distribution of rand things, discrete or continuous.
  - breakdown other categories when describing
- make scenarios from UI
- poisson for introducing vehicles
- comparing experiments (pairwise, and average over many trials)
- piecewise resimulation (savestating)
- verify determinism retained... ordering events queue
- things to test
  - wacky cases of 2 side-by-side agents wanting to swap places?

# UI
- label agents with their number in the GUI
- javafx?
- 3D
- visualize red/green lights better
- cmdline switch to follow stuff or zoom in somewhere
- ui speed controls.. step one tick, display a certain fps, sleep to match what?
- visualize lookahead
- turn off generators
- color agents from diff generators a certain way
- right click context menus
- show 'fps' in viewer
- config

# Lane-changing
- roads arent shortened enough when conservative lookahead picks too high a speed, then caps itself... two brief passes, to get the right amount of lookahead? :P
- any missed opportunities?
- dont let agents start lc that depends on others getting out of way. till then,
  funky patterns of backup
- speculative desired_lane
- road lengthening means we dont have to reduce numbers of lanes for LCing
- removal approach doesnt handle having to LC many times on one road

# Micro-optimizations
- sleep less in UI
- truncate lengths, other doubles or more compactly write
- why are traversable lines given not as point sequence?

# Distributed Parallelization
- meseoscopic in between regions? lockstep necessary?
- dynamic load balancing? any need to split up by region?
- actors / akka?

# Applications
- follow dist variable based on speed, so when a light goes green,
  everyone starts simultaneously
- contraflow
- dynamic replanning + hierarchial planning (wards)
- rewindable simulation

# Theoretical
- is there a way to analytically say "an agent will own this chunk" at some time, and
  then solve for collisions?
- can we make timesteps equivalent? (probably not)
- varying dt mid-simulation

# Administrative
- website
  - build instructions (with scala and such)
  - wiki docs
  - scaladoc
- osm scraper script
  https://github.com/migurski/Extractotron/
- rename lanes/intersections/junctions in code too? policy -> controller?
- switch ant to sbt? https://github.com/harrah/xsbt/wiki/Examples
- repository of detailed cities with demand data?
