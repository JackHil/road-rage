# TODO #

thurs goals:
  3 sections of paper
  fix remaining bugs
  tweak cfg with units
  improve generators

- tweak cfg now that we have meters

GENERATORS
  - we can do much better with ready agents... max capacity of edges, group them based on where they want to spawn, maybe by generator?
  - a way to turn them off / reap them in the UI
  - color agents from diff generators a certain way
  - a way to save a "scenario"
  - test at scale, and profile again.

- remaining bugs
  - btr 1328839854309, wait for army, 2 agents stalemate because they... disappear?!

  - entering intersections at speed=0, causing deadlock.
  - btr, 1000 agents, seed 1328487489724: vert collisions, asking to choose turn now?
  - if we seriously pack people together, we get a traffic jam! try on synthetic.
  - is an agent overshooting its route sometimes? (change assert to warning)
  - collisions in intersection

BIGGER ISSUES
  - traffic lights
    - accept for 30 seconds into queue, switch when everyone's done?
    - is there deadlock?
    - quadratic conflict checking!
  - fix geom of edge lines
  - make sure turns and conflicts are as good as possible
    - randomize num of lanes to test
  - reservation policy
    - we do deadlock!
    - tell the intersection who we are behind, and make sure our turn will be satisfied after theirs
      in the queue.
    *** but then they will have to schedule their turn first...
    - or no, there is no deadlock, since if x is behind y, theyre in the same turn, and those never
      conflict?
  * lane changing
  * slow down for turns (stop sign forces this now)
  - is there a way to analytically say "an agent will own this chunk" at some time, and then solve for collisions?

POSSIBLY SIMPLE
  - script to scrape osm
  - switch ant to sbt? https://github.com/harrah/xsbt/wiki/Examples
  - drunkard walk endless behavior mode... no planning, just wanders around
  - when we speed up, sleep less in UI?
  - ui configurable intersection policies

### Map building ###

- our pruning of pedestrian ways seems to be a bit too enthusiastic (see Guadalupe St)
- deterministic construction is still wonky, with both ward IDs and lines (due to meeting up)
- make line segs meet up better.
- style: xml out could be string.format or xml and then stringify, or use lazy?
- cul-de-sac handling in p2... needed?
  - Claus Circle in BR... has no outgoing turns.
- pregraph3 vs final graph structure?
- multi-lane situations dont have enough turns, and we need to do more trimming!
- lane reversal
  1) Traversable.location starts from the other end (distances, queues all stay same)
  2) dynamically recalculating turns

### Wards ###

- whats broken with mikes?
  - length
  - overall strategy
  - semantics of one of the set operations
- find 'major' roads better
  - crosses/links major roads
  - manually editing
  - update osm (scripts!)
- my wards!
  - guarantee some kind of connectedness within a ward

### UI ###

- show routes better
- config
- menu items doing stuff
- make it look nicer
  - UI polishing
  - black road backgrounds dont meet up smoothly since we go by line segment
    - add extra lanes on either side, dont color them white, but draw the stuff in between?
- way better pruning of what to (re-draw) using quadtrees
  - but is it even needed?
- dont show arrows when line segs are really clustered
- ui could show policy's current owner or something
- draw the orig corner of freehanded polygons differently or something
- whoa, timer isnt thread safe? (mouse over an agent without a position!)

### Agents ###

- detect collisions
  - post-mortem checker still misses scary things in between, like when merging.

- lots of things break if we have a vertex with a self-loop

- make them slow down for turns

- lanechanging model
- spawning specifically in UI
- structuring policy stuff as a state machine and events may be more elegant...
- give lanes/roads/etc the ability to be closed

### Scalaisms ###

- move all configable things to Util
- use ListBuffers more.
- make more immutable things
- reduce more vars to vals
- make everything possible immutable, but then have to figure out how to build
  inter-referential things
  - Mutable subclasses of everything used during construction..
  - have more ids and methods that access based on those. that'll break it.
- explicitly override hashcode?

### Simulation ###

- tolling
- lane reversal
- traffic signals
- dynamic traffic signals
- spawning realistic traffic patterns
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Demand/Introduction_to_demand_modelling_in_SUMO.html
  http://sumo.sourceforge.net/doc/current/docs/userdoc/Data/Traffic_Data.html
- promoting stop signs -> lights
- mixing intersections!

### Administrative ###

- documentation
- API and code freeze
- paper
